import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
* @author Ruopeng Jiang
* @version 2019-10-28
*/
public class TemperatureTest {

	public static final double TOLERANCE = 0.000000001;

	@Test
	public void test1() {
		double[] temperatures = { 173, 
				64, 304, 246, 98, 106, 20, 102, 221, 253, 218, 361, 119, 6, 13, 175, 32, 285, 
                216, 168, 297, 214, 327, 220, 363, 344, 307, 58, 112, 151, 354, 22, 23, 203, 50, 
                301, 107, 45, 101, 25, 282, 103, 132, 30, 152, 179, 59, 286, 149, 283, 274, 223, 
                194, 47, 29, 70, 52, 185, 31, 247, 183, 232, 248, 80, 317, 68, 0, 99, 213, 104, 
                115, 355, 364, 141, 290, 215, 159, 292, 193, 41, 42, 69, 19, 8, 140, 95, 251, 272, 
                24, 67, 241, 318, 147, 56, 78, 357, 200, 346, 242, 276, 295, 118, 89, 46, 48, 211,
                97, 4, 362, 100, 228, 39, 319, 21, 356, 270, 271, 313, 322, 302, 330, 349, 360, 
                207, 169, 236, 66, 34, 336, 139, 239, 108, 9, 320, 126, 2, 5, 38, 123, 208, 131, 105,		            
               135, 182, 26, 79, 198, 18, 323, 309, 176, 94, 202, 339, 164, 161, 224, 174, 263, 312,
               63, 138, 43, 17, 332, 153, 291, 11, 321, 142, 267, 324, 143, 199, 188, 352, 288, 280,
               134, 289, 15, 84, 315, 144, 93, 341, 128, 316, 178, 306, 229, 217, 314, 44, 73, 33,
               308, 91, 358, 170, 187, 124, 154, 279, 353, 27, 1, 351, 265, 294, 82, 227, 266, 210, 
               35, 350, 342, 166, 206, 347, 36, 338, 237, 96, 192, 262, 209, 311, 148, 85, 122, 325,
               3, 281, 195, 337, 231, 233, 157, 130, 252, 75, 348, 90, 243, 298,204, 12, 189, 234, 121, 
               117, 167, 310, 114, 284, 201, 300, 110, 40, 62, 268, 87, 186, 65, 334, 226, 55, 275, 49, 
               160, 127, 303, 244, 113, 51, 61, 10, 287, 254, 129, 250, 158, 28, 74, 191, 71, 181, 16, 219, 
               77, 83, 136, 240, 133, 81, 299, 172, 54, 326, 235, 259, 162, 145, 264, 333, 340, 156, 86,
               72, 335, 60, 120, 177, 238, 76, 155, 277, 57, 165, 116, 359, 293, 273, 305, 256, 245, 225,
               260, 14, 329, 163, 137, 184, 196, 53, 258, 296, 190, 88, 257, 180, 331, 125, 171, 222, 
               261, 7, 328, 92, 205, 269, 278, 111, 150, 212, 109, 197, 37, 255, 249, 343, 146, 345, 230 };
		
		double expectedColdest = 67;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	public void test2() {
		double[] temperatures = { -171,
				-62,-302,-244,-96,-104,-18,-100,-219,-251,-216,-359,-117,-4,-11,
				-173,-30,-283,-214,-166,-295,-212,-325,-218,-361,-342,-305,-56,-110,
				-149,-352,-20,-21,-201,-48,-299,-105,-43,-99,-23,-280,-101,-130,
				-28,-150,-177,-57,-284,-147,-281,-272,-221,-192,-45,-27,-68,-50,
				-183,-29,-245,-181,-230,-246,-78,-315,-66,-2,-97,-211,-102,-113,
				-353,-362,-139,-288,-213,-157,-290,-191,-39,-40,-67,-17,-6,-138,
				-93,-249,-270,-22,-65,-239,-316,-145,-54,-76,-355,-198,-344,-240,
				-274,-23,-116,-87,-44,-46,-209,-95,-2,-360,-98,-226,-37,-317,
				-19,-354,-268,-269,-311,-320,-300,-328,-347,-358,-205,-167,-234,-64,
				-32,-334,-137,-237,-106,-7,-318,-124,-0,-3,-36,-121,-206,-129,
				-103,-133,-180,-24,-77,-196,-16,-321,-307,-174,-92,-200,-337,-162,
				-159,-222,-172,-261,-310,-61,-136,-41,-15,-330,-151,-289,-9,-319,
				-140,-265,-322,-141,-197,-186,-350,-286,-278,-132,-287,-13,-82,-313,
				-142,-91,-339,-126,-314,-176,-304,-227,-215,-312,-42,-71,-31,-306,
				-89,-356,-168,-185,-122,-152,-277,-351,-25,-1,-349,-263,-292,-80,
				-225,-264,-208,-33,-348,-340,-164,-204,-345,-34,-336,-235,-94,-190,
				-260,-207,-309,-146,-83,-120,-323,-1,-279,-193,-335,-229,-231,-155,
				-128,-250,-73,-346,-88,-241,-296,-202,-10,-187,-232,-119,-115,-165,
				-308,-112,-282,-199,-298,-108,-38,-60,-266,-85,-184,-63,-332,-224,
				-53,-273,-47,-158,-125,-301,-242,-111,-49,-59,-8,-285,-252,-127,
				-248,-156,-26,-72,-189,-69,-179,-14,-217,-75,-81,-134,-238,-131,
				-79,-297,-170,-52,-324,-233,-257,-160,-143,-262,-331,-338,-154,-84,
				-70,-333,-58,-118,-175,-236,-74,-153,-275,-55,-163,-114,-357,-291,
				-271,-303,-254,-243,-223,-258,-12,-327,-161,-135,-182,-194,-51,-256,
				-294,-188,-86,-255,-178,-329,-123,-169,-220,-259,-5,-326,-90,-203,
				-267,-276,-109,-148,-210,-107,-195,-35,-253,-247,-500,-144,-343,-228
    };

		double expectedColdest = 362;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	public void test3() {
		double[] temperatures = { -973,
					-36,204,146,-2,6,-80,2,121,153,118,261,19,-94,-87,
					75,-68,185,116,68,197,114,227,120,263,244,207,-42,12,
					51,254,-78,-77,103,-50,201,7,-55,1,-75,182,3,32,
					-70,52,79,-41,186,49,183,174,123,94,-53,-71,-30,-48,
					85,-69,147,83,132,148,-20,217,-32,-100,-1,113,4,15,
					255,264,41,190,115,59,192,93,-59,-58,-31,-81,-92,40,
					-5,151,172,-76,-33,141,218,47,-44,-22,257,100,246,142,
					176,195,18,-11,-54,-52,111,-3,-96,262,0,128,-61,219,
					-79,256,170,171,213,222,202,230,249,260,107,69,136,-34,
					-66,236,39,139,8,-91,220,26,-98,-95,-62,23,108,31,
					5,35,82,-74,-21,98,-82,223,209,76,-6,102,239,64,
					61,124,74,163,212,-37,38,-57,-83,232,53,191,-89,221,
					42,167,224,43,99,88,252,188,180,34,189,-85,-16,215,
					44,-7,241,28,216,78,206,129,117,214,-56,-27,-67,208,
					-9,258,70,87,24,54,179,253,-73,-99,251,165,194,-18,
					127,166,110,-65,250,242,66,106,247,-64,238,137,-4,92,
					162,109,211,48,-15,22,225,-97,181,95,237,131,133,57,
					30,152,-25,248,-10,143,198,104,-88,89,134,21,17,67,
					210,14,184,101,200,10,-60,-38,168,-13,86,-35,234,126,
					-45,175,-51,60,27,203,144,13,-49,-39,-90,187,154,29,
					150,58,-72,-26,91,-29,81,-84,119,-23,-17,36,140,33,
					-19,199,72,-46,226,135,159,62,45,164,233,240,56,-14,
					-28,235,-40,20,77,138,-24,55,177,-43,65,16,259,193,
					173,205,156,145,125,160,-86,229,63,37,84,96,-47,158,
					196,90,-12,157,80,231,25,71,122,161,-93,228,-8,105,
					169,178,11,50,112,9,97,-63,155,149,243,46,245,130
	};
		
		double expectedColdest = 1;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	public void test4() {
		double[] temperatures = {117.97,
					189.78,-93.95,-3.62,-3583.9,189.92,331.08,199.06,306.96,-147.58,-196.88,-167.05,182.44,325.51,-158.51,
					4.8,-90.36,232.15,79.26,379.3,-66.4,-71.98,-141.25,55.75,254.2,-93.42,342.94,156.78,151.75,
					55.97,128.49,395.15,304.54,6.32,134.64,216.01,264.99,284.18,25.11,86.5,-84.53,-187.6,396.33,
					-76.71,172.72,259.15,35.57,-89.02,252.51,49.08,116.26,70.24,241.13,302.46,55.58,84.46,150.42,
					364.86,310.68,287.15,55.87,-69.77,-165.11,149.75,-65.33,-155.21,54.4,90.47,30.93,-93.54,-141.63,
					-50.48,380.18,-53.06,21.65,-155.02,-76.8,398.38,-100.26,135.28,231.41,-193.91,349.18,-128.99,-148.29,
					-48.31,-165.58,217.97,58.12,397.49,183.24,277.3,-29.07,153.69,248.49,115.69,-29.04,3.84,-177.92,
					49.82,-102.76,2.2199998,-69.69,-96.2,-128.87,178.22,-84.16,77.18,337.82,148.45,81.52,-176.83,258.37,
					146.23,135.45,-57.02,-78.78,131.46,34.21,351.79,-28.64,339.98,-127.7599,65.61,178.8,72.53,11.02,
					-104.63,-15.02,-92.81,80.06,-84.03,-23.77,-152.77,214.66,-197.68,338.39,188.2,121.58,-6.41,-155.72,
					303.08,83.91,158.58,218.36,-96.08,-169.5,391.59,208.17,-158.98,-97.53,-32.16,-28.07,347.64,351.34,
					330.96,-135.31,228.36,-102.35,-127.4601,372.71,23.74,-131.35,194.66,6.15,261.45,-84.53,321.14,14.95,
					326.22,287.21,-58.08,40.7,-154.16,-91.04,237.11,259.73,200.06,275.07,-66.62,-192.14,11.99,-173.69,
					19524,307.29,-121.75,31.03,147.28,138.8,134.53,35.65,-139.5,-80.04,337.67,88.39,-82.54,-139.61,
					37288,-26.83,-4.87,-130.29,266.66,16.59,-126.59,92.33,101.47,51.27,289.33,-65.38,287.16,32.59,
					112.95,-163.46,47.23,13.49,21.06,-181.51,324.66,283.48,187.98,8.05,-197.48,272.88,300.36,117.83,
					168.6,-87.63,33.78,206.61,-68.58,320.63,203.73,10.38,216.48,-31.1199,-77.7,278.17,37.28,-158.4,
					253.96,-110.58,144.45,-23.62,69.99,265.61,-90.35,-76.5,-148.97,-81.88,-2.6,317.3,80.5,297.75,
					218.32,96.36,9.28,28.09,-58.35,-51.49,352.81,315.98,-27.25,289.21,106.65,-163.61,-127.06,108.34,
					-64.67,287.71,114.54,140.4,301.16,105.16,222.99,227.04,-143.76,-94.21,-38.83,248.59,-179.71,318.21,
					57.33,2.3603,110.75,-76.78,368.8,-99.14,78.71,298.65,107.6,151.89,235.57,222.34,32.21,364.81,
					129.67,141.85,-68.86,-95.85,351.21,67.59,289.78,181.35,305.72,87.97,140.8,239.72,302.48,141.31,
					351.5,244.84,54.17,308.19,398.19,-155.42,77.65,111.57,-181.98,7.4,122.64,128.97,213.0,287.05,
					36.88,31.35,308.64,-106.04,200.33,-31.508,141.64,-119.8,230.18,218.26,-33.78,-35.04,70.38,-190.49,
					-72.02,241.4,35.54,-185.91,-42.92,13.21,-121.12,182.79,-120.71,-89.22,97.58,373.3,233.69,-168.17,
					75.82,385.49,-79.74,-59.73,297.33,-20.29,378.26,339.81,-66.31,208.55,-81.87,314.91,233.42,-538.69
 };

		double expectedColdest = 5;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	public void test5() {
		double[] temperatures = { -295.67,
						-118.69,-152.49,-806.38,-174.21,-371.48,-250.45,-299.14,-290.68,-272.49,-315.18,-286.76,-152.39,-383.76,-124.83,
						-248.79,-331.14,-255.26,-198.06,-368.01,-181.42,-119.68,-289.66,-366.56,-114.02,-159.45,-104.13,-246.18,-181.26,
						-255.82,-340.21,-319.29,-238.27,-209.89,-288.73,-262.68,-380.41,-159.62,-294.0,-273.06,-121.28,-303.34,-254.51,
						-354.72,-268.22,-180.4,-182.56,-323.59,-172.2,-352.62,-164.47,-168.95,-277.83,-176.34,-263.13,-274.49,-275.97,
						-154.33,-382.8,-363.73,-165.75,-309.06,-372.43,-301.16,-366.32,-124.52,-178.37,-350.45,-279.2,-162.56,-169.74,
						-263.34,-391.43,-271.25,-150.56,-249.24,-127.19,-268.01,-141.67,-154.09,-200.59,-398.24,-262.21,-359.48,-296.24,
						-141.1,-165.79,-198.16,-105.57,-258.9,-289.52,-370.47,-176.92,-363.58,-155.45,-237.66,-395.08,-104.55,-123.58,
						-162.8,-392.17,-265.7,-332.97,-367.78,-105.89,-196.39,-283.35,-375.51,-143.31,-391.03,-103.57,-210.7,-379.06,
						-174.95,-224.81,-239.77,-314.93,-250.47,-127.22,-140.29,-254.97,-306.47,-356.1,-304.27,-304.58,-396.98,-110.78,
						-195.73,-285.38,-250.22,-393.39,-202.7,-168.22,-377.76,-367.48,-146.79,-166.35,-215.86,-117.2,-138.83,-397.6,
						-245.36,-116.35,-198.76,-220.27,-305.09,-114.07,-289.47,-270.45,-334.62,-118.48,-249.87,-280.74,-356.65,-313.16,
						-350.82,-139.54,-236.79,-372.69,-339.02,-258.56,-138.84,-352.69,-178.43,-351.64,-227.73,-317.72,-346.92,-292.68,
						-258.69,-335.93,-296.32,-212.4,-231.59,-213.18,-238.3,-114.24,-181.95,-161.51,-375.58,-338.12,-326.86,-196.65,
						-258.17,-177.58,-182.97,-337.83,-307.82,-260.48,-126.21,-339.09,-120.15,-136.44,-168.73,-216.28,-323.95,-175.19,
						-286.87,-145.88,-349.46,-369.1,-246.03,-303.17,-133.56,-350.67,-333.22,-375.68,-168.82,-180.8,-326.05,-234.92,
						-285.37,-337.63,-398.15,-374.57,-339.84,-337.02,-185.43,-126.52,-174.12,-345.72,-314.84,-247.41,-397.98,-106.22,
						-127.97,-327.82,-244.34,-178.14,-215.67,-314.03,-343.9,-215.38,-216.17,-247.58,-266.24,-340.32,-119.89,-122.29,
						-279.13,-247.01,-166.53,-129.84,-184.33,-263.61,-116.51,-115.36,-398.87,-231.1,-128.15,-292.7,-363.93,-210.09,
						-274.39,-275.44,-379.91,-210.44,-388.34,-363.87,-386.2,-149.36,-235.83,-191.28,-126.5,-182.99,-374.67,-373.1,
						-266.83,-223.52,-175.56,-121.66,-162.06,-349.64,-247.46,-386.09,-99.02,-141.2,-231.53,-152.12,-179.67,-321.06,
						-201.92,-389.64,-345.9,-166.71,-239.41,-167.28,-189.18,-361.94,-324.07,-262.86,-133.04,-295.39,-327.22,-285.89,
						-223.82,-176.35,-169.49,-194.26,-116.24,-131.04,-151.8,-131.03,-194.29,-262.57,-159.24,-329.24,-225.02,-106.57,
						-183.85,-332.55,-203.09,-291.03,-211.86,-158.13,-207.34,-113.79,-273.03,-284.17,-357.12,-283.77,-255.75,-179.14,
						-325.75,-233.46,-249.84,-202.39,-241.27,-398.99,-291.01,-196.34,-380.47,-381.53,-345.96,-159.61,-241.14,-149.26,
						-294.88,-237.14,-259.85,-112.56,-339.62,-388.55,-227.48,-206.74,-189.93,-99.29,-343.38,-346.5,-157.64,-180.36,
						-340.46,-274.14,-319.19,-361.94,-307.92,-309.64,-390.83,-123.7,-136.62,-224.76,-397.21,-120.7,-212.29,-305.85
};

		double expectedColdest = 4;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}
	
	@Test
	public void test6() {
		double[] temperatures = { 179.34,
						78.07,103.77,143.3,73.18,143.87,69.12,75.89,98.13,17.83,1.4,178.92,54.33,116.07,127.36,
						90.98,104.15,182.9,93.85,98.62,28.18,166.8,143.5,73.46,41.85,9.28,175.64,41.94,69.46,
						199.67,82.11,21.91,115.83,81.45,131.2,158.03,49.85,8.9,188.32,67.16,120.35,147.8,7.94,
						65.17,61.11,189.72,109.06,188.18,110.37,106.72,55.39,44.32,69.43,111.94,101.0,135.82,55.63,
						10.84,134.18,176.93,67.03,129.39,54.04,99.64,69.0,187.25,148.8,87.01,37.7,47.74,109.34,
						102.92,50.73,21.13,8.07,197.81,102.52,123.45,100.72,160.92,39.81,200.72,67.23,63.12,62.27,
						116.54,98.38,87.8,13.95,71.0,55.51,183.4,2.85,169.71,183.84,87.02,129.6,193.97,143.14,
						166.93,80.14,136.66,34.97,110.7,43.29,63.08,51.67,146.0,50.8,32.0,150.09,22.83,5.88,
						169.4,161.55,8.55,165.27,125.7,189.96,51.7,70.98,67.4,20.78,55.13,89.43,54.5,166.64,
						66.54,9.0,137.75,108.66,141.49,171.44,173.04,58.06,63.64,168.24,194.94,158.47,17.03,19.92,
						17.45,77.3,97.01,174.42,137.37,193.01,19.02,10.18,3.81,75.35,138.86,10.1,87.51,76.85,
						133.05,184.63,134.38,6.38,4.93,65.22,119.83,39.37,79.56,63.92,134.2,34.42,129.9,200.48,
						124.11,72.21,136.92,135.28,90.57,110.18,28.02,114.64,1.92,155.31,60.9,34.23,118.28,97.23,
						124.1,157.35,43.66,115.35,110.95,86.34,23.08,176.13,90.04,178.88,184.14,170.37,43.32,125.25,
						186.13,105.59,72.06,58.08,84.12,64.68,181.13,153.47,142.08,169.6,43.75,200.05,35.52,147.87,
						121.71,62.29,173.4,89.26,170.11,144.93,138.07,1.8,91.14,77.25,93.64,28.4,117.78,79.18,
						44.86,69.49,6.44,45.58,42.32,71.78,96.54,90.74,24.64,189.9,155.24,131.97,163.94,4.85,
						67.35,59.52,138.39,192.36,53.31,139.15,94.06,73.89,1.89,124.68,177.89,154.7,90.1,119.59,
						24.79,55.57,129.01,119.89,63.88,178.9,22.26,194.87,172.54,14.66,153.01,18.27,51.57,188.15,
						25.54,148.9,120.68,178.95,79.13,78.21,141.03,99.31,65.06,11.69,159.61,10.22,131.15,31.5,
						140.26,174.66,194.14,99.8,197.15,200.18,96.47,105.28,78.42,6.68,41.92,30.02,61.64,170.22,
						83.82,119.09,117.03,40.11,199.79,72.72,70.62,104.04,128.5,148.55,156.75,184.77,66.94,61.18,
						187.58,191.87,130.7,96.93,187.33,123.45,165.1,123.29,139.58,15.3,61.71,166.18,78.53,168.46,
						182.55,152.17,118.31,51.66,23.37,68.67,159.45,170.96,57.8,181.99,137.23,126.74,195.84,71.2,
						184.2,36.84,62.77,85.43,167.52,94.8,158.92,12.51,131.29,53.17,95.96,59.17,25.46,74.89,
						121.96,85.86,134.62,78.98,45.44,13.88,33.88,22.2,47.58,28.03,93.57,104.46,0.15,35.05
};

		double expectedColdest = 364;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

}
